
version: 0.1.{build}

skip_branch_with_pr: true

image: ubuntu

stack: python 3.9

environment:
  PGLET_VERSION: 0.5.6
  TWINE_USERNAME: __token__
  TWINE_NON_INTERACTIVE: true
  pypi_key: 
    secure: bPSgMbRTG8EIrSW8RUbb8go0xbmg4/E4NnYfGl8h+L+KlWEk5mHLojLG/b6S6nVSCRXEHU/Vc0KjxLO+6mDrC3OT13kwv3fRRT90JNkOIlxePeoEhRFnh3u9nxlxeWncYBayef3U/zdxTTBd4YXqMPZ22qvCqeIRcOi/fzTRrfZ84Wr5V/JS7Jpmzg2yc2B/kzUBiQlfvflY7YUw/QFaiPhYytIglE7XY+r04JwNfgA=
  test_pypi_key: 
    secure: LAsjCb0tqzjUEPxHTq8TPmTDzERQpSS0po96HhXEEczG8EaWqCUdtb+bhT3QLihy+4X4MvErEYXYieUT+KjpuVdgjc/UrqDEuQngBL9r7k5cRMV878c232zbLGljHckNr4TCzHJosANrYBrx0sNg9gVnAoJOxNbu40A1rVB8Qj9ob/eCKwXHHRxfrf0d/NwoLZViCE4toV333tVr5vshlLkQA3oRiS2OZG3VKagTI4nsKCaOFqJHFlvy2a0LEUdc

install:
- python --version
- pip install --upgrade setuptools wheel twine pdm poetry
- pdm install
- pdm info && pdm info --env
- echo Using Pglet ${PGLET_VERSION}

# downloading binaries
- sh: |
    function download_binary() {
      echo "Downloading $1"
      mkdir -p pglet/bin/$1
      curl -L https://github.com/pglet/pglet/releases/download/v${PGLET_VERSION}/pglet-${PGLET_VERSION}-$1 -o pglet/bin/$1/pglet
      chmod a+x pglet/bin/$1/pglet
    }

    echo "Downloading windows-amd64"
    mkdir -p pglet/bin/windows-amd64
    curl -L https://github.com/pglet/pglet/releases/download/v${PGLET_VERSION}/pglet-${PGLET_VERSION}-windows-amd64.exe -o pglet/bin/windows-amd64/pglet.exe

    download_binary "linux-amd64"
    download_binary "linux-arm64"
    download_binary "linux-arm"
    download_binary "darwin-amd64"
    download_binary "darwin-arm64"

build_script:
# run tests
#- pytest
- ls -alR pglet/bin

# build and publish package
- ps: |
    $ErrorActionPreference = "Stop"

    if ($env:APPVEYOR_REPO_TAG -eq 'true') {
      # release mode

      # version
      $ver = $env:APPVEYOR_REPO_TAG_NAME
      if ($ver.StartsWith('v')) { $ver = $ver.Substring(1) }

      # prerelease moniker
      $idx = $ver.indexOf('-')
      if ($idx -ne -1) {
        $prerelease = $ver.Substring($idx + 1)
        $ver = $ver.Substring(0, $idx)
      }
      $env:TWINE_PASSWORD = $env:pypi_key
    } else {

      # build mode
      $ver = $env:APPVEYOR_BUILD_VERSION
      $env:TWINE_PASSWORD = $env:test_pypi_key
      $env:TWINE_REPOSITORY = 'testpypi'
    }

    # patch version
    (Get-Content pyproject.toml).replace("version = `"0.1.0`"", "version = `"$ver`"") | Set-Content pyproject.toml

# build package
#- pdm build
#- python -m build --sdist --wheel --no-isolation .
- poetry build

# publish package
- sh: |
    if [[ "$APPVEYOR_PULL_REQUEST_NUMBER" == "" ]]; then
        twine upload dist/*
    fi

test_script:
- mkdir test_wheel
- unzip dist/*.whl -d ./test_wheel
#- whls=(dist/*.whl)
#- echo "${whls[0]}"
#- mv "${whls[0]}" test-wheel.zip
#- unzip test-wheel.zip
#- tar -xf test-wheel.tar.gz -C test_wheel
- ls -alR test_wheel

artifacts:
  path: dist/*